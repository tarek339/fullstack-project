upstream backend {
    server backend:3000;
}

upstream frontend {
    server frontend:80;
}

http {
    # Zone für API Rate Limiting (10 req/sec pro IP)
    limit_req_zone $remote_addr zone=api_limit:10m rate=10r/s;

    # Zone für allgemeine Requests (100 req/sec pro IP)
    limit_req_zone $remote_addr zone=general_limit:10m rate=100r/s;

    server {
        listen 80;
        server_name www.meinewebseite.de;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

        # API routes - proxy to backend
        location /api/ {
            # Handle preflight requests first
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:80" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type "text/plain; charset=utf-8" always;
                add_header Content-Length 0 always;
                return 204;
            }

            # Rate limit: max 10 req/sec, burst von 20 erlaubt
            limit_req zone=api_limit burst=20 nodelay;

            # Bei Überschreitung: 429 Too Many Requests
            limit_req_status 429;

            # CORS Headers for regular requests
            add_header Access-Control-Allow-Origin "http://localhost:80" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept" always;
            add_header Access-Control-Allow-Credentials "true" always;

            proxy_pass http://backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Health check for backend
        location /health {
            proxy_pass http://backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Frontend routes - proxy to frontend
        location / {
            limit_req zone=general_limit burst=50 nodelay;
            proxy_pass http://frontend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Handle errors
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}

