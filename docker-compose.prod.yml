version: "3.8"

services:
  # Backend Service (NestJS)
  backend:
    build:
      context: ./project-name
      dockerfile: Dockerfile.prod
    container_name: fullstack_backend_prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://prod_user:prod_password@postgres:5432/fullstack_prod
      - REDIS_URL=redis://redis:6379
    networks:
      - fullstack-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (React/Vite)
  frontend:
    build:
      context: ./vite-project
      dockerfile: Dockerfile.prod
    container_name: fullstack_frontend_prod
    environment:
      - NODE_ENV=production
    networks:
      - fullstack-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:80",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fullstack_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl # For SSL certificates
    depends_on:
      - backend
      - frontend
    networks:
      - fullstack-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fullstack_postgres_prod
    environment:
      - POSTGRES_DB=fullstack_prod
      - POSTGRES_USER=prod_user
      - POSTGRES_PASSWORD=prod_password
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fullstack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prod_user -d fullstack_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fullstack_redis_prod
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data_prod:/data
    networks:
      - fullstack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  fullstack-network:
    driver: bridge
